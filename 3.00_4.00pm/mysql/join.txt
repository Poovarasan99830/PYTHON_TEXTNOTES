______________________________________________________________

Student

| id | name  | class |
| -- | ----- | ----- |
| 1  | Anu   | 10    |
| 2  | Ravi  | 10    |
| 3  | Meena | 11    |


marks

| id | student\_id | subject | marks |
| -- | ----------- | ------- | ----- |
| 1  | 1           | Maths   | 88    |
| 2  | 2           | Science | 75    |
| 3  | 1           | English | 90    |
| 4  | 3           | Maths   | 85    |



#__________________________________________________________________

Find average marks per student.

List subject-wise toppers.

List students who scored below 50 in any subject.

Join more than 2 tables (add a teachers table).

Use RIGHT JOIN (swap table order) and interpret the results.



Question: List all students along with their subjects and marks.
Question: List all students and their marks. Include students even if they don’t have marks.
Question: Find the number of subjects each student has marks for.
Question: Show the highest mark scored by each student.
Question: List all students who have not appeared for any subject.


SELECT students.name, students.class, marks.subject, marks.marks
FROM students
JOIN marks ON students.id = marks.student_id;


SELECT students.name, marks.subject, marks.marks
FROM students
LEFT JOIN marks ON students.id = marks.student_id;


SELECT students.name, COUNT(marks.subject) AS subject_count
FROM students
JOIN marks ON students.id = marks.student_id
GROUP BY students.name;


SELECT students.name, MAX(marks.marks) AS highest_mark
FROM students
JOIN marks ON students.id = marks.student_id
GROUP BY students.name;


SELECT students.name
FROM students
LEFT JOIN marks ON students.id = marks.student_id
WHERE marks.id IS NULL;










| Clause  | Purpose                                                                |
| ------- | ---------------------------------------------------------------------- |
| `ON`    | Specifies how to **join** the tables (which rows match).               |
| `WHERE` | Filters the result **after** joining – it can remove NULLs from joins. |


| Join Type    | Includes students with no marks? | Use Case                   |
| ------------ | -------------------------------- | -------------------------- |
| `LEFT JOIN`  | ✅ Yes                            | Show all students          |
| `INNER JOIN` | ❌ No                             | Show only those with marks |


#left join

| id | name  | subject\_count |                              |
| -- | ----- | -------------- | ---------------------------- |
| 1  | Anu   | 2              |                              |
| 2  | Ravi  | 1              |                              |
| 3  | Meena | 1              |                              |
| 4  | Latha | 0              | ← Suppose Latha has no marks |
This gives a complete picture of all students, including those who didn’t appear in any subject.


INNER JOIN:
This would exclude students with no marks. So subject_count would only be shown for students who appeared in at least one subject.

SELECT s.id, s.name, COUNT(m.subject) AS subject_count
FROM Student s
INNER JOIN Marks m ON s.id = m.student_id
GROUP BY s.id, s.name;



| Syntax         | Meaning                |
| -------------- | ---------------------- |
| `Student AS s` | Alias `Student` as `s` |
| `Student s`    | Alias `Student` as `s` |
| `SELECT s.id`  | Refers to `Student.id` |


Best Practice?
Using AS is more explicit and can help beginners understand better.

But experienced developers often omit it for brevity.


